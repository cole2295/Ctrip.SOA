<#+
    public class ProcedureTemplate : Template
    {
        private DatabaseSchemaReader.DataSchema.DatabaseTable _databaseTable;
        private ClassGenInfo _classGenInfo;

        public ProcedureTemplate(ClassGenInfo classGenInfo, DatabaseSchemaReader.DataSchema.DatabaseTable databaseTable)
        {
            _classGenInfo = classGenInfo;
            _databaseTable = databaseTable;
        }

        private string _className;
        protected string ClassName
        {
            get
            {
                if (string.IsNullOrWhiteSpace(_className))
                {
                    _className = _classGenInfo.GetClassName(_databaseTable.Name);
                }
                return _className;
            }
        }

        private string _fileName;
        public string FileName
        {
            get
            {
              
                return _databaseTable.Name+".Sql";
            }
        }

        private string _tableName;
        protected string TableName
        {
            get
            {
                if (string.IsNullOrWhiteSpace(_tableName))
                {
                    _tableName = ClassName.Substring(0, ClassName.Length -_classGenInfo.NameSuffix.Length);
                }

                return _tableName;
            }
        }

        private string _modelName;
        protected string ModelName
        {
            get
            {
                if (string.IsNullOrWhiteSpace(_modelName))
                {
                    _modelName = TableName + "Model";
                }

                return _modelName;
            }
        }

        private string _entityName;
        public string EntityName
        {
            get
            {
                if(string.IsNullOrWhiteSpace(_entityName))
                {
                    _entityName = TableName + "Entity";
                }

                return _entityName;
            }
        }

        private string _repositoryName;
        protected string RepositoryName
        {
            get
            {
                if (string.IsNullOrWhiteSpace(_repositoryName))
                {
                    _repositoryName = TableName + "Repository";
                }

                return _repositoryName;
            }
        }

        public override string TransformText()
        {
#>
/* ->
* -> 该代码使用工具生成，请勿手动修改 
* -> 生成时间： <#=            DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #> 
*/


DROP PROCEDURE [dbo].[spA_<#= _databaseTable.Name #>_u]
GO

DROP PROCEDURE [dbo].[spA_<#= _databaseTable.Name #>_i]
GO

DROP PROCEDURE [dbo].[spA_<#= _databaseTable.Name #>_d]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  CREATE PROCEDURE [dbo].[spA_<#= _databaseTable.Name #>_d]  
  
                  @<#= _databaseTable.PrimaryKeyColumn.Name #> bigint  
                  AS  
                  DECLARE @retcode int, @rowcount int   
                  SET LOCK_TIMEOUT 1000  
                  DELETE [<#= _databaseTable.Name #>] WHERE [<#= _databaseTable.PrimaryKeyColumn.Name #>]=@<#= _databaseTable.PrimaryKeyColumn.Name #>                
  
                    
                  SELECT @retcode = @@ERROR, @rowcount = @@ROWCOUNT  
                  IF @retcode = 0 AND @rowcount = 0  
                  BEGIN   
                    SELECT 100  
                    RETURN 100  
                  END   
                  ELSE  
                  BEGIN   
       SELECT @retcode  
       RETURN @retcode  
                  END   

GO

  CREATE PROCEDURE [dbo].[spA_<#= _databaseTable.Name #>_i]  

    
  <#+ 
  var lastColumn = _databaseTable.Columns.Last();
                foreach(var colSchema in _databaseTable.Columns) 
                { 
                   
            #>

                         <#+ if(colSchema.IsPrimaryKey ) { #>
	    
		@<#= colSchema.Name #> <#= colSchema.DataType.TypeName #> output,

	   <#+
	   }else {
	   #>
	      @<#= colSchema.Name #> <#= colSchema.DataType.TypeName #> <#+ if(colSchema.DataType.IsString){ #>(<#=colSchema.Length#>)<#+ }#>  <#+ if(!colSchema.Equals(lastColumn)){ #> , <#+ }#>

	   <#+ }#>
            <#+
                } 
            #>
			   AS  
           DECLARE @retcode int, @rowcount int ,@identity bigint
           SET LOCK_TIMEOUT 1000  
          INSERT INTO [dbo].[<#= _databaseTable.Name #>]
           (
		    <#+ 
                foreach(var colSchema in _databaseTable.Columns) 
                { 
            #>
                         <#+ if(!colSchema.IsPrimaryKey ) { #>
		[<#= colSchema.Name #>] <#+ if(!colSchema.Equals(lastColumn) ) #> , <#+ #>
	
	   <#+ }#>
            <#+
                } 
            #>

			)
			VALUES
			(
			    <#+ 
                foreach(var colSchema in _databaseTable.Columns) 
                { 
            #>
                         <#+ if(!colSchema.IsPrimaryKey ) { #>
		@<#= colSchema.Name #> <#+ if(!colSchema.Equals(lastColumn) ) #> , <#+ #>
	   <#+
	   }
	   #>
	 
            <#+
                } 
            #>
			)

           SELECT @retcode = @@ERROR, @rowcount = @@ROWCOUNT  ,@identity = @@IDENTITY
           IF @retcode = 0 AND @rowcount = 0  
            BEGIN   
                    SELECT 100  
                    RETURN 100  
            END   
            ELSE  
            BEGIN   
			set @<#= _databaseTable.PrimaryKeyColumn.Name #> = @identity
			SELECT @retcode  
			RETURN @retcode  

            END  


	
GO

   CREATE PROCEDURE [dbo].[spA_<#= _databaseTable.Name #>_u]  
   <#+ 

                foreach(var colSchema in _databaseTable.Columns) 
                { 
                   
            #>

		  @<#= colSchema.Name #> <#= colSchema.DataType.TypeName #> <#+ if(colSchema.DataType.IsString){ #>(<#=colSchema.Length#>)<#+ }#>  <#+ if(!colSchema.Equals(lastColumn)){ #> , <#+ }#>

            <#+
                } 
            #>
                    
              AS  
			  DECLARE @retcode int, @rowcount int  
              SET LOCK_TIMEOUT 1000  
             UPDATE [dbo].[<#= _databaseTable.Name #>]
             SET 

			    <#+ 

                foreach(var colSchema in _databaseTable.Columns) 
                { 
                   
            #>
			<#+ if(!colSchema.IsPrimaryKey ) { #>
			[<#= colSchema.Name #>] = ISNULL(@<#= colSchema.Name #> ,[<#= colSchema.Name #>])<#+ if(!colSchema.Equals(lastColumn)){ #> , <#+ }#>
		
		     <#+ }#>
            <#+
                } 
            #>

			WHERE <#= _databaseTable.PrimaryKeyColumn.Name #>=@<#= _databaseTable.PrimaryKeyColumn.Name #>

			  SELECT @retcode = @@ERROR, @rowcount = @@ROWCOUNT  
              IF @retcode = 0 AND @rowcount = 0  
              BEGIN   
     SELECT 100  
                    RETURN 100  
              END   
              ELSE  
              BEGIN   
     SELECT @retcode  
     RETURN @retcode  
              END  
GO
<#+
            return this.GenerationEnvironment.ToString();
        }
    }
	
#>
